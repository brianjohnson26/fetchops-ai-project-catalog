generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_SUPABASE")
}

// NextAuth tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                      Int              @id @default(autoincrement())
  title                   String
  description             String
  team                    String
  hoursSavedPerWeek       Int              @default(0)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  howYouBuiltIt           String?
  challengesSolutionsTips String?
  otherImpacts            String?
  nextSteps               String?
  owner                   String

  // children / relations
  links     Link[]
  people    PersonProject[]
  tools     ProjectTool[]
}

model Tool {
  id       Int           @id @default(autoincrement())
  name     String        @unique

  // Deleting a Tool is RESTRICT by default (intentional)
  projects ProjectTool[]
}

model ProjectTool {
  projectId Int
  toolId    Int

  // Cascade delete when a Project is deleted
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Keep Tool delete as RESTRICT to avoid nuking usage records when a tool is removed
  tool      Tool    @relation(fields: [toolId], references: [id])

  @@id([projectId, toolId])
}

model Person {
  id          Int             @id @default(autoincrement())
  name        String
  slackHandle String          @unique

  // Deleting a Person is RESTRICT by default (intentional)
  projects    PersonProject[]
}

model PersonProject {
  personId  Int
  projectId Int
  role      String

  // Keep Person delete as RESTRICT (default)
  person    Person  @relation(fields: [personId], references: [id])

  // Cascade delete when a Project is deleted
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([personId, projectId])
}

model Link {
  id        Int     @id @default(autoincrement())
  projectId Int
  type      String
  url       String

  // Cascade delete when a Project is deleted
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
