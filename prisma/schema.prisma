generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_SUPABASE")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                      Int             @id @default(autoincrement())
  title                   String
  description             String
  team                    String
  hoursSavedPerWeek       Int             @default(0)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  howYouBuiltIt           String?
  challengesSolutionsTips String?
  otherImpacts            String?
  owner                   String
  nextSteps               String?
  links                   Link[]
  people                  PersonProject[]
  tools                   ProjectTool[]
}

model Tool {
  id       Int           @id @default(autoincrement())
  name     String        @unique
  projects ProjectTool[]
}

model ProjectTool {
  projectId Int
  toolId    Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tool      Tool    @relation(fields: [toolId], references: [id])

  @@id([projectId, toolId])
}

model Person {
  id          Int             @id @default(autoincrement())
  name        String
  slackHandle String          @unique
  projects    PersonProject[]
}

model PersonProject {
  personId  Int
  projectId Int
  role      String
  person    Person  @relation(fields: [personId], references: [id])
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([personId, projectId])
}

model Link {
  id        Int     @id @default(autoincrement())
  projectId Int
  type      String
  url       String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
